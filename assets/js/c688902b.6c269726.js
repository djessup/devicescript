"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[4712],{35318:(e,t,r)=>{r.d(t,{Zo:()=>l,kt:()=>m});var n=r(27378);function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function p(e,t){if(null==e)return{};var r,n,i=function(e,t){if(null==e)return{};var r,n,i={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(i[r]=e[r]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var s=n.createContext({}),c=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},l=function(e){var t=c(e.components);return n.createElement(s.Provider,{value:t},e.children)},u="mdxType",f={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,i=e.mdxType,a=e.originalType,s=e.parentName,l=p(e,["components","mdxType","originalType","parentName"]),u=c(r),d=i,m=u["".concat(s,".").concat(d)]||u[d]||f[d]||a;return r?n.createElement(m,o(o({ref:t},l),{},{components:r})):n.createElement(m,o({ref:t},l))}));function m(e,t){var r=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=r.length,o=new Array(a);o[0]=d;var p={};for(var s in t)hasOwnProperty.call(t,s)&&(p[s]=t[s]);p.originalType=e,p[u]="string"==typeof e?e:i,o[1]=p;for(var c=2;c<a;c++)o[c]=r[c];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},22708:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>f,frontMatter:()=>a,metadata:()=>p,toc:()=>c});var n=r(25773),i=(r(27378),r(35318));const a={title:"SPI",sidebar_position:101},o="SPI",p={unversionedId:"api/spi",id:"api/spi",title:"SPI",description:"The SPI builtin package that exposes functions to read, write, transfer buffers over SPI.",source:"@site/docs/api/spi.mdx",sourceDirName:"api",slug:"/api/spi",permalink:"/devicescript/api/spi",draft:!1,tags:[],version:"current",sidebarPosition:101,frontMatter:{title:"SPI",sidebar_position:101},sidebar:"tutorialSidebar",previous:{title:"WebASM VM",permalink:"/devicescript/api/vm"}},s={},c=[{value:"<code>spiConfigure</code>",id:"spiconfigure",level:2},{value:"<code>spiRead</code>",id:"spiread",level:2},{value:"<code>spiWrite</code>",id:"spiwrite",level:2},{value:"<code>spiTransfer</code>",id:"spitransfer",level:2}],l={toc:c},u="wrapper";function f(e){let{components:t,...r}=e;return(0,i.kt)(u,(0,n.Z)({},l,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"spi"},"SPI"),(0,i.kt)("p",null,"The SPI ",(0,i.kt)("a",{parentName:"p",href:"/developer/packages"},"builtin package")," that exposes functions to read, write, transfer buffers over SPI."),(0,i.kt)("h2",{id:"spiconfigure"},(0,i.kt)("inlineCode",{parentName:"h2"},"spiConfigure")),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"spiConfigure")," function is used to configure the SPI bus. It takes the pin configuration, frequency and mode."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'import { spiConfigure } from "@devicescript/spi"\n\nawait spiConfigure({})\n')),(0,i.kt)("h2",{id:"spiread"},(0,i.kt)("inlineCode",{parentName:"h2"},"spiRead")),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"spiRead")," function is used to read a buffer from the SPI bus."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'import { spiRead } from "@devicescript/spi"\n\nconst res = await spiRead(8) // read 8 bytes\n')),(0,i.kt)("h2",{id:"spiwrite"},(0,i.kt)("inlineCode",{parentName:"h2"},"spiWrite")),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"spiWrite")," function is used to write a buffer to the SPI bus."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'import { spiWrite } from "@devicescript/spi"\n\nawait spiWrite(hex`abcd`)\n')),(0,i.kt)("h2",{id:"spitransfer"},(0,i.kt)("inlineCode",{parentName:"h2"},"spiTransfer")),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"spiTransfter")," function is used to write and read buffers from and to the SPI bus.\nThe read buffer has the same length as the write buffer."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'import { spiTransfer } from "@devicescript/spi"\n\nconst res = await spiTransfer(hex`abcd`)\n')))}f.isMDXComponent=!0}}]);